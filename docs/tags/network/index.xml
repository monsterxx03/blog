<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on Shining Moon</title>
    <link>https://blog.monsterxx03.com/tags/network/</link>
    <description>Recent content in network on Shining Moon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>monsterxx03</copyright>
    <lastBuildDate>Tue, 30 Jun 2020 14:40:01 +0800</lastBuildDate>
    
	<atom:link href="https://blog.monsterxx03.com/tags/network/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>snet dev note: stats api and terminal UI</title>
      <link>https://blog.monsterxx03.com/2020/06/30/snet-dev-note-stats-api-and-terminal-ui/</link>
      <pubDate>Tue, 30 Jun 2020 14:40:01 +0800</pubDate>
      
      <guid>https://blog.monsterxx03.com/2020/06/30/snet-dev-note-stats-api-and-terminal-ui/</guid>
      <description>从 0.10.0 版本开始给 snet 加了 stats api 来暴露内部的一些统计数据. 设置 &amp;quot;enable-stats&amp;quot;: true 开启, 默认监听 8810 端口, curl http://localhost:8810/stats { &amp;quot;Uptime&amp;quot;: &amp;quot;26m42s&amp;quot;, &amp;quot;Total&amp;quot;: { &amp;quot;RxSize&amp;quot;: 161539743, &amp;quot;TxSize&amp;quot;: 1960171 }, &amp;quot;Hosts&amp;quot;: [ { &amp;quot;Host&amp;quot;: &amp;quot;112.113.115.113&amp;quot;, &amp;quot;Port&amp;quot;: 443, &amp;quot;RxRate&amp;quot;: 0, &amp;quot;TxRate&amp;quot;: 0, &amp;quot;RxSize&amp;quot;: 840413, &amp;quot;TxSize&amp;quot;: 172528 }, ... ] } 分 host, 统计从该地址接收的字节数(RxSize), 发送字节数(TxSize), 和相应的 rate/s (RxRate, TxRate). 默认只记录 ip, 可以设置 &amp;quot;stats-enable-tls-sni-sniffer&amp;quot;: true, 开启对去往 443 端口的流量进行 sni sniffer, 尝试解析出域名. &amp;quot;stats-enable-http-host-sniffer&amp;quot;: true, 对发往 80 端口流量尝试解析 http host 字段, 两者都会给连接建立过程增加一些 overhead. server 开启 stats api 后, 用 ./snet -top 可以显示一</description>
    </item>
    
    <item>
      <title>snet dev note</title>
      <link>https://blog.monsterxx03.com/2019/11/29/snet-dev-note/</link>
      <pubDate>Fri, 29 Nov 2019 12:00:01 +0800</pubDate>
      
      <guid>https://blog.monsterxx03.com/2019/11/29/snet-dev-note/</guid>
      <description>snet: 0.5 ~ 0.6.1, 整理从上一篇以来的一些更新. 新增选项 proxy-scope, 默认 bypassCN, 可选 global. bypassCN 会做国内外分流, global 直接让所有流量去往国外. host-map, 为域名指定 ip. 之前在测试一个功能的时候需要在内网让手机对某个域名的解析切换到我的测试 ip 上, 坑爹的是公司的路由器竟然没这功能, 索性在 snet 里写了这个功能, 让我的台式机发射 wifi, 手机连上来, snet 的 mode 切换成 router, listen-host 改为 0.0.0.0 就好了. block-hosts, 因为 block-host-file 里的域名是从一个现成的列表生成出来的, 不好支持通配符, 所以加了这个, 比如 [&amp;quot;*.hpplay.cn&amp;quot;], 就能把电</description>
    </item>
    
    <item>
      <title>snet dev note: support MacOS</title>
      <link>https://blog.monsterxx03.com/2019/06/20/snet-dev-note-support-macos/</link>
      <pubDate>Thu, 20 Jun 2019 16:03:56 +0800</pubDate>
      
      <guid>https://blog.monsterxx03.com/2019/06/20/snet-dev-note-support-macos/</guid>
      <description>这两天得了空, 让 snet 支持了下 MacOS. snet 的大致原理是通过系统防火墙的流量重定向功能,将所有去往国外的流量导到 snet 监听的端口, 在程序内部 将流量传递给上游的 proxy server(ss, http), 拿到响应后再回给客户端. 实现关键是要在 snet 内部获取到流量的原目标地址, 因为重定向之后 tcp connnection 的目标地址变成了 snet 监听 的地址. Linux 上的实现，以前讲过: https://blog.monsterxx03.com/2019/03/31/snet-transparent-ss-proxy-on-linux/ 是通过 SO_ORIGINAL_DST 这个 socket option 实现的. MacOS 上没有 iptables, 类似的工具是系统自带的 pfctl, 捣鼓了一下也能实现一样的功能. 用 pfctl 做流量重定向 pfctl 的文档可</description>
    </item>
    
    <item>
      <title>snet dev note</title>
      <link>https://blog.monsterxx03.com/2019/04/10/snet-dev-note/</link>
      <pubDate>Wed, 10 Apr 2019 22:33:49 +0800</pubDate>
      
      <guid>https://blog.monsterxx03.com/2019/04/10/snet-dev-note/</guid>
      <description>完成 SNET 初版后又做了些后续更新, 记录一点. 支持 http tunnel 配置文件里增加一个 proxy-type 选项, 默认为 ss, 可改成 http, 这样可以将 支持 http tunnel 的代理服务器作为 upstream(例如 squid). 填上 http-proxy- 开头 的选项就行. 实现上 client 端要对接 http tunnel 非常简单: client 发送请求: Connect tgt-host:tgt-port HTTP/1.1 server response: HTTP/1.1 200, 即表示 server 端支持 http tunnel client 后续向该 tcp connection 写入的数据都会被 server 转发到 tgt-host:tgt-port 改动的时候把 upstream proxy 的部分重构了一下, 抽了个 Proxy interface 出来, 后续想对接其他协议方便扩展. 对 udp 支持的尝试 对 tcp 流量的转发能通过 iptables REDIRECT</description>
    </item>
    
    <item>
      <title>snet: transparent ss proxy on Linux</title>
      <link>https://blog.monsterxx03.com/2019/03/31/snet-transparent-ss-proxy-on-linux/</link>
      <pubDate>Sun, 31 Mar 2019 22:19:46 +0800</pubDate>
      
      <guid>https://blog.monsterxx03.com/2019/03/31/snet-transparent-ss-proxy-on-linux/</guid>
      <description>日常使用 Linux 工作, Linux 下实现全局透明代理可以用 iptables + ss-redir, 要有比较好的上网体验还需要 ChinaDNS 配合 dnsmasq, 这一整套在路由器上搞一遍就算了, 在本地太麻烦了. 仔细想想这几个加起来的功能实现起来也并不复杂, 前阵子就写了个小东西, 用一个进程完成全局透明代理 + ChinaDNS + 国内外分流: https://github.com/monsterxx03/snet 目前的限制: 不支持 ipv6 只支持 tcp (因为我的测试服务器不支持 udp, 以后再加上吧) 上游 server 只支持 ss 目的是一个进程 + 一个配置文件完成所有事情. 需要的 iptable 规则也全部内置了(包括</description>
    </item>
    
  </channel>
</rss>